<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ASIP Designer Processor Modeling</title>
      <link href="/2025/07/02/asip_design_tool/asip_training_processor_modeling/"/>
      <url>/2025/07/02/asip_design_tool/asip_training_processor_modeling/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Why-and-How-to-Design-an-ASIP"><a href="#Why-and-How-to-Design-an-ASIP" class="headerlink" title="Why and How to Design an ASIP?"></a>Why and How to Design an ASIP?</h2><p>Application-Specific Instruction-set Processors (ASIPs) bridge the gap between general-purpose microprocessors and dedicated hardware, offering:</p><ul><li>Maximum performance</li><li>Minimal power consumption</li><li>Programmability</li></ul><p>The core steps in ASIP design include:</p><ul><li><strong>Modeling the Instruction Set Architecture (ISA):</strong> Using the nML language to define the processor’s structure.</li><li><strong>Automatic Software Development Kit (SDK) Generation:</strong> Produces a C compiler and related tools.</li><li><strong>Algorithm-Driven Architectural Exploration:</strong> Utilizes a “Compile-in-the-Loop” approach to optimize the architecture.</li><li><strong>Automatic Synthesizable RTL Generation:</strong> Employs a “Synthesis-in-the-Loop” methodology for hardware implementation.</li></ul><p><img src="/./img/intro_asip_design_overview.png" alt="ASIP Design Overview"></p><h2 id="Processor-Modeling"><a href="#Processor-Modeling" class="headerlink" title="Processor Modeling"></a>Processor Modeling</h2><h3 id="Header-File"><a href="#Header-File" class="headerlink" title="Header File"></a>Header File</h3><p>The core header file, <code>&lt;processor&gt;.h</code>, defines primitive functions and data types within a dedicated namespace: <code>namespace &lt;processor&gt;_primitive &#123;&#125;</code>. It should include:</p><ul><li>Primitive data type definitions</li><li>Primitive function declarations</li><li>Primitive data type conversion rules</li></ul><p>Additional header files, such as <code>&lt;processor&gt;_&lt;function&gt;.h</code>, can be created to extend functionality with more operations or features.</p><h3 id="nML-Language"><a href="#nML-Language" class="headerlink" title="nML Language"></a>nML Language</h3><p>The nML language defines the structural skeleton and instruction-set architecture of the processor. Key components include:</p><ul><li><code>mem</code>: Defines memory spaces.</li><li><code>reg</code>: Specifies register structures.</li><li><code>pipe</code>: Stores values across pipeline stages (persistent).</li><li><code>trn</code>: Holds temporary values within a single stage.</li><li><code>opn</code>: Represents operation nodes.</li><li><code>cst</code>: Declares type conversion rules.</li><li><code>action</code>: Defines instruction behavior.</li><li><code>image</code>: Specifies binary encoding for instructions.</li><li><code>syntax</code>: Defines the assembly code representation.</li></ul><p>Example nML code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">opn alu_inst (op:opcode, x:c2u, y:c2u, val:c16s) &#123;</span><br><span class="line">  action &#123;</span><br><span class="line">    stage EX1:</span><br><span class="line">    A = R[x];</span><br><span class="line">    B = val;</span><br><span class="line">    switch (op) &#123;</span><br><span class="line">      case add: C = add(A, B) @alu;</span><br><span class="line">      case sub: C = sub(A, B) @alu;</span><br><span class="line">      case and: C = band(A, B) @alu;</span><br><span class="line">      case or:  C = bor(A, B) @alu;</span><br><span class="line">    &#125;</span><br><span class="line">    stage EX2:</span><br><span class="line">    R[y] = C;</span><br><span class="line">  &#125;</span><br><span class="line">  syntax: op &quot; R&quot; y &quot;, R&quot; x &quot;, &quot; val; # Displays as &lt;add R1, R2, val&gt;</span><br><span class="line">  image: &quot;0&quot;::op::x::y::val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Primitive-Definitions"><a href="#Primitive-Definitions" class="headerlink" title="Primitive Definitions"></a>Primitive Definitions</h3><p>Primitive definitions, written in <code>&lt;processor&gt;.p</code> files, use the Primitive Definition Language (PDG), which is based on C and supports operators, conditions, iterations, and functions with fixed types. PDG definitions are convertible to C++, VHDL, or Verilog.</p><p>Example PDG code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">word add(word a, word b, astat&amp; s)</span><br><span class="line">&#123;</span><br><span class="line">  int17_t aa = (uint16_t)a; // Zero extension</span><br><span class="line">  int17_t bb = (uint16_t)b;</span><br><span class="line">  int17_t d = aa + bb;</span><br><span class="line">  s = (d[16]^d[15]) :: (d &lt; 0) :: (d == 0);</span><br><span class="line">  return d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ASIP-Designer-Tool-Features"><a href="#ASIP-Designer-Tool-Features" class="headerlink" title="ASIP Designer Tool Features"></a>ASIP Designer Tool Features</h2><h3 id="ChessDE"><a href="#ChessDE" class="headerlink" title="ChessDE"></a>ChessDE</h3><p>The ChessDE tool, typically run on Linux via command line, offers:</p><ul><li>Configuration management</li><li>Function-level incremental compilation</li><li>Parallel compilation on multi-core hosts</li></ul><p>For Instruction Set Simulator (ISS) development, it supports:</p><ul><li>Bit-true, cycle-accurate, or instruction-accurate simulation</li><li>Just-in-time compilation</li><li>Performance and speed profiling</li><li>Automatic verification</li></ul><h1 id="Primitives"><a href="#Primitives" class="headerlink" title="Primitives"></a>Primitives</h1><h2 id="Declaring-Primitives"><a href="#Declaring-Primitives" class="headerlink" title="Declaring Primitives"></a>Declaring Primitives</h2><p>Primitive types are defined using C++-style class declarations within a namespace, formatted as <code>class &lt;type&gt; property(format)</code>. Example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> tinycore2_primitive &#123;</span><br><span class="line">  <span class="function"><span class="keyword">class</span> word <span class="title">property</span><span class="params">(<span class="number">16</span> bit <span class="type">signed</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">class</span> pmtype <span class="title">property</span><span class="params">(<span class="number">13</span> bit <span class="type">unsigned</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">class</span> sbyte <span class="title">property</span><span class="params">(<span class="number">8</span> bit <span class="type">signed</span>)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Primitive functions represent user-defined behaviors and are categorized into:</p><ul><li><strong>Named Functions:</strong> Standard function declarations.</li><li><strong>Conversion Constructors:</strong> Handle type conversions, such as numbers or vectors.</li></ul><p>Example conversion:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sint8</span>(sin8)    <span class="comment">// xxxxxxxx -&gt; ssssssssxxxxxxxx</span></span><br><span class="line"><span class="built_in">vword3</span>(vbyte3) <span class="comment">// __ef __10 __ab -&gt; ffef 0010 ffab</span></span><br></pre></td></tr></table></figure><p>Example primitive function declaration:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> mycore_primitive &#123;</span><br><span class="line">  <span class="function"><span class="keyword">class</span> stat <span class="title">property</span><span class="params">(<span class="number">3</span> bit <span class="type">unsigned</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">word <span class="title">sub</span><span class="params">(word, word)</span></span>;</span><br><span class="line">  <span class="function">word <span class="title">sub</span><span class="params">(word, word, stat&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">word</span> &#123;</span><br><span class="line">    <span class="built_in">word</span>(sbyte);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Primitive-Definitions-1"><a href="#Primitive-Definitions-1" class="headerlink" title="Primitive Definitions"></a>Primitive Definitions</h2><p>Primitive definitions, written in PDG (based on C), exclude control flow primitives and type conversions. PDG supports C-like operations and control flows. Example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int16_t</span> INT16_MAX = <span class="number">0x7fff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int16_t</span> INT16_MIN = <span class="number">-0x8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">word <span class="title">sat16</span><span class="params">(<span class="type">int17_t</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; INT16_MAX)</span><br><span class="line">    <span class="keyword">return</span> INT16_MAX;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; INT16_MIN)</span><br><span class="line">    <span class="keyword">return</span> INT16_MIN;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">word <span class="title">adds</span><span class="params">(word a, word b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int17_t</span> sum = (<span class="type">int17_t</span>)a + (<span class="type">int17_t</span>)b;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sat16</span>(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The PDG tool structure is illustrated below:<br><img src="/./img/PDG_tool.png" alt="PDG Tool Structure"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Primitives consist of data types and functions, organized into:</p><ul><li><strong>Declaration:</strong> Defined in <code>&lt;processor&gt;.h</code></li><li><strong>Definition:</strong> Implemented in <code>&lt;processor&gt;.p</code></li></ul><p>These files collectively enable the modeling, simulation, and synthesis of ASIP designs using the ASIP Designer Tool.</p>]]></content>
      
      
      <categories>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Overview of ASIP design tool</title>
      <link href="/2025/07/01/asip_design_tool/Introduction_to_asip_design/"/>
      <url>/2025/07/01/asip_design_tool/Introduction_to_asip_design/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview-of-ASIP-Designer"><a href="#Overview-of-ASIP-Designer" class="headerlink" title="Overview of ASIP Designer"></a>Overview of ASIP Designer</h1><h2 id="What-Is-ASIP-Designer"><a href="#What-Is-ASIP-Designer" class="headerlink" title="What Is ASIP Designer"></a>What Is ASIP Designer</h2><p><strong>ASIP Designer</strong> is Synopsys’s tool for developing Application-Specific Instruction-set Processors (ASIPs). It lets you:</p><ul><li>Define custom processor architectures using <strong>nML</strong>, a high-level description language for ISA, registers, and memory</li><li>Generate software toolchains tailored to your ISA</li><li>Simulate performance and refine your design</li></ul><h2 id="Example-Project-tctcore"><a href="#Example-Project-tctcore" class="headerlink" title="Example Project: tctcore"></a>Example Project: <code>tctcore</code></h2><p>Before starting, set up the environment and load the required modules:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> asip_design/</span><br><span class="line"><span class="built_in">source</span> chess_env_LNa64.sh</span><br><span class="line">module load base</span><br><span class="line">module load asip_designer</span><br><span class="line">module load vcs</span><br></pre></td></tr></table></figure><p>In this example, we use the educational <code>tctcore</code> project to demonstrate the workflow.</p><h3 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h3><p><img src="/./img/tctcore_project_structure.png" alt="tctcore Project Structure"></p><h3 id="Generating-the-Simulation-Model"><a href="#Generating-the-Simulation-Model" class="headerlink" title="Generating the Simulation Model"></a>Generating the Simulation Model</h3><p>Run the model generation script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make_model</span><br></pre></td></tr></table></figure><p>Then compile the C&#x2F;C++ algorithm (e.g., <code>irrdirect</code>) and simulate it:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tctcore_chess.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Low-pass filter parameters:</span></span><br><span class="line"><span class="comment">//   Sample frequency (Hz)              : 44 000</span></span><br><span class="line"><span class="comment">//   Cut-off frequency (Hz)            : 5 000</span></span><br><span class="line"><span class="comment">//   Damping factor                     : 1.5</span></span><br><span class="line"><span class="comment">//   Data width (signed)                : 16 bits</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">1341</span>, b = <span class="number">5591</span>, g = <span class="number">16607</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> C[<span class="number">5</span>] = &#123; a, <span class="number">2</span>*a, a, g, -b &#125;;</span><br><span class="line"><span class="type">int</span> xd[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;, yd[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">low_pass</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">long</span> acc = fmult(x, C[<span class="number">0</span>])</span><br><span class="line">             + fmult(xd[<span class="number">0</span>], C[<span class="number">1</span>])</span><br><span class="line">             + fmult(xd[<span class="number">1</span>], C[<span class="number">2</span>])</span><br><span class="line">             + fmult(yd[<span class="number">0</span>], C[<span class="number">3</span>])</span><br><span class="line">             + fmult(yd[<span class="number">1</span>], C[<span class="number">4</span>]);</span><br><span class="line">    <span class="type">int</span> y = <span class="number">2</span> * (<span class="type">int</span>)round(acc);</span><br><span class="line">    xd[<span class="number">1</span>] = xd[<span class="number">0</span>]; xd[<span class="number">0</span>] = x;</span><br><span class="line">    yd[<span class="number">1</span>] = yd[<span class="number">0</span>]; yd[<span class="number">0</span>] = y;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">low_pass_v2</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">long</span> acc = fmult(x, C[<span class="number">0</span>]);</span><br><span class="line">    acc = fmacc(xd[<span class="number">0</span>], C[<span class="number">1</span>], acc);</span><br><span class="line">    acc = fmacc(xd[<span class="number">1</span>], C[<span class="number">2</span>], acc);</span><br><span class="line">    acc = fmacc(yd[<span class="number">0</span>], C[<span class="number">3</span>], acc);</span><br><span class="line">    acc = fmacc(yd[<span class="number">1</span>], C[<span class="number">4</span>], acc);</span><br><span class="line">    <span class="type">int</span> y = <span class="number">2</span> * (<span class="type">int</span>)round(acc);</span><br><span class="line">    xd[<span class="number">1</span>] = xd[<span class="number">0</span>]; xd[<span class="number">0</span>] = x;</span><br><span class="line">    yd[<span class="number">1</span>] = yd[<span class="number">0</span>]; yd[<span class="number">0</span>] = y;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> <span class="title function_">chess_storage</span><span class="params">(DM:<span class="number">256</span>)</span> input_port;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> <span class="title function_">chess_storage</span><span class="params">(DM:<span class="number">257</span>)</span> output_port;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        output_port = low_pass(input_port);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        output_port = low_pass_v2(input_port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code above illustrates two implementations:</p><ol><li><strong><code>low_pass</code></strong> uses basic multiply and add operations.</li><li><strong><code>low_pass_v2</code></strong> leverages the intrinsic <code>fmacc</code> for fused multiply-accumulate.</li></ol><p>Further details on nML structure will follow in subsequent sessions.</p><h2 id="HDL-ISS-and-Libraries"><a href="#HDL-ISS-and-Libraries" class="headerlink" title="HDL, ISS, and Libraries"></a>HDL, ISS, and Libraries</h2><ul><li><strong>HDL</strong>: Generates synthesizable Verilog&#x2F;VHDL from the design.</li><li><strong>ISS</strong>: Provides an instruction-set simulator for software validation.</li><li><strong>Libraries</strong>: Include standard and custom components (e.g., arithmetic units, register files).</li></ul><h2 id="Executing-a-tctcore-Task"><a href="#Executing-a-tctcore-Task" class="headerlink" title="Executing a tctcore Task"></a>Executing a <code>tctcore</code> Task</h2><p>To run prx files and generate infrastructure code, use <code>chessmk</code> and a Makefile. For example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chessmk lib/tctcore.prx -r</span><br><span class="line">chessmk lib/tctcore.prx</span><br><span class="line">chessmk iss/caiss.prx</span><br><span class="line">chessmk hdl/tctcore_vlog.prx</span><br></pre></td></tr></table></figure><p>This process creates directories for debugging, type&#x2F;register visualization, and centralized maintenance.</p><h3 id="Running-C-C-Simulation"><a href="#Running-C-C-Simulation" class="headerlink" title="Running C&#x2F;C++ Simulation"></a>Running C&#x2F;C++ Simulation</h3><p>Create a dedicated Makefile (e.g., <code>make_tctcore</code>) then:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compile algorithm</span></span><br><span class="line">chesscc -c iirdirect/iirdirect.c -P lib/tctcore.prx</span><br><span class="line"><span class="comment"># Link to generate executable</span></span><br><span class="line">chesscc -o hdl/tctcore_vlog_go/iirdirectx iirdirect.o -P lib/tctcore.prx</span><br><span class="line"></span><br><span class="line"><span class="comment"># Elaborate and simulate</span></span><br><span class="line"><span class="built_in">cd</span> hdl/tctcore_vlog_go</span><br><span class="line">make elab</span><br><span class="line">make <span class="built_in">test</span> TEST=iirdirectx</span><br><span class="line">make sim</span><br><span class="line"><span class="built_in">cd</span> ../..</span><br></pre></td></tr></table></figure><p>At this point, the basic simulation and verification are complete. Continuous integration into the CI&#x2F;CD pipeline can be configured as needed.</p><hr>]]></content>
      
      
      <categories>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Biography</title>
      <link href="/2025/02/10/aboutMe/"/>
      <url>/2025/02/10/aboutMe/</url>
      
        <content type="html"><![CDATA[<h1 id="Biography"><a href="#Biography" class="headerlink" title="Biography"></a>Biography</h1><p>I am currently a junior at the School of Electronic Engineering and Computer Science at Peking University, where my research interests lie at the intersection of hardware architecture design and machine learning, with a particular focus on hardware-software co-design. This field excites me because it bridges the gap between efficient hardware systems and intelligent algorithms, offering transformative potential for modern computing.</p><p>Building on a strong foundation in hardware design from my undergraduate studies, along with research experience in AI chip development, I am eager to deepen my expertise and contribute to groundbreaking innovations in the field. I plan to continue my graduate studies in the fall of 2026, and I am currently seeking a fall research internship to further develop my skills and knowledge.</p><p>Feel free to reach out to me anytime. You can find my CV <a href="https://worldline22.github.io/pdf/CV.pdf">here</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在前面</title>
      <link href="/2024/07/28/preinfo/"/>
      <url>/2024/07/28/preinfo/</url>
      
        <content type="html"><![CDATA[<ol><li>这是我的个人博客，本网站将不定期更新自己科研、生活上的点点滴滴，希望你能喜欢。</li><li>网页分为“黑&#x2F;白”两种模式可供选择，右下角设置键可以修改模式。</li><li>本网页目前评论功能只支持拥有github账号的访客使用，评论时请使用自己的github账号登录，注意评论文明，感谢你的浏览(❤ ω ❤)。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
