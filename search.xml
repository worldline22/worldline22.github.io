<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Overview of ASIP design tool</title>
      <link href="/2025/07/01/asip_design_tool/Introduction_to_asip_design/"/>
      <url>/2025/07/01/asip_design_tool/Introduction_to_asip_design/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview-of-ASIP-design-tool"><a href="#Overview-of-ASIP-design-tool" class="headerlink" title="Overview of ASIP design tool"></a>Overview of ASIP design tool</h1><h2 id="What-is-ASIP-Designer"><a href="#What-is-ASIP-Designer" class="headerlink" title="What is ASIP Designer"></a>What is ASIP Designer</h2><p><strong>ASIP Designer</strong> is a Synopsys tool for designing Application-Specific Instruction-set Processors (ASIPs). It allows you to define custom processor architectures, generate software toolchains, and simulate performance. ASIP Designer uses <strong>nML</strong>, a high-level description language to define the processor’s instruction set architecture (ISA), registers, and memory. </p><p><img src="/../../img/asip-designer-flow-diagram.png" alt="asip_overview"></p><h2 id="A-brief-example-of-ASIP-design-porject"><a href="#A-brief-example-of-ASIP-design-porject" class="headerlink" title="A brief example of ASIP design porject"></a>A brief example of ASIP design porject</h2><p>In this case, we test the educational example <code>tctcore</code> to test how the asip_design tools work. First, let’s give a glimpse of the project structure.</p><p><img src="/../../img/tctcore_project_structure.png" alt="tctcore_project_structure"></p><p>When we begin to generate the simulation code, just simply run the <code>make_model</code>. After we run the model, we can then do some simulation works using <code>chesscc</code> tools. Let’s take the algorithm ‘irrdirect’ as an example. First we need to write the code of it in C&#x2F;C++.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tctcore_chess.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Low pass filter:</span></span><br><span class="line"><span class="comment">//   Sample frequency (Hz)              : 44000</span></span><br><span class="line"><span class="comment">//   Cut off frequency (Hz)             : 5000</span></span><br><span class="line"><span class="comment">//   Damping factor                     : 1.5</span></span><br><span class="line"><span class="comment">//   Number of bits in signed data type : 16</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">1341</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">5591</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> g = <span class="number">16607</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> C[<span class="number">5</span>] = &#123; a, <span class="number">2</span>*a, a, g, -b&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> xd[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> yd[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">low_pass</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line"><span class="comment">// Version with basic operations </span></span><br><span class="line"><span class="comment">//    long fmult(int, int) </span></span><br><span class="line"><span class="comment">//    long operator+(long,long) </span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> y = <span class="number">2</span>*round(fmult(x,C[<span class="number">0</span>]) + fmult(xd[<span class="number">0</span>],C[<span class="number">1</span>]) + fmult(xd[<span class="number">1</span>],C[<span class="number">2</span>])</span><br><span class="line">   + fmult(yd[<span class="number">0</span>],C[<span class="number">3</span>]) + fmult(yd[<span class="number">1</span>],C[<span class="number">4</span>]));</span><br><span class="line">   xd[<span class="number">1</span>] = xd[<span class="number">0</span>];</span><br><span class="line">   xd[<span class="number">0</span>] = x;</span><br><span class="line">   yd[<span class="number">1</span>] = yd[<span class="number">0</span>];</span><br><span class="line">   yd[<span class="number">0</span>] = y;</span><br><span class="line">   <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">low_pass_v2</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line"><span class="comment">// Version with intrinsic </span></span><br><span class="line"><span class="comment">//    long macc(int,int,long) </span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">long</span> a = fmult(x,C[<span class="number">0</span>]);</span><br><span class="line">   a = fmacc(xd[<span class="number">0</span>],C[<span class="number">1</span>],a);</span><br><span class="line">   a = fmacc(xd[<span class="number">1</span>],C[<span class="number">2</span>],a);</span><br><span class="line">   a = fmacc(yd[<span class="number">0</span>],C[<span class="number">3</span>],a); </span><br><span class="line">   a = fmacc(yd[<span class="number">1</span>],C[<span class="number">4</span>],a);</span><br><span class="line">   <span class="type">int</span> y = <span class="number">2</span>*round(a);</span><br><span class="line">   xd[<span class="number">1</span>] = xd[<span class="number">0</span>];</span><br><span class="line">   xd[<span class="number">0</span>] = x;</span><br><span class="line">   yd[<span class="number">1</span>] = yd[<span class="number">0</span>];</span><br><span class="line">   yd[<span class="number">0</span>] = y;</span><br><span class="line">   <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> <span class="title function_">chess_storage</span><span class="params">(DM:<span class="number">256</span>)</span> input_port;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> <span class="title function_">chess_storage</span><span class="params">(DM:<span class="number">257</span>)</span> output_port;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        output_port = low_pass(input_port);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        output_port = low_pass_v2(input_port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The detailed structure of this code will be explained in the following sessions.</p>]]></content>
      
      
      <categories>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Biography</title>
      <link href="/2025/02/10/aboutMe/"/>
      <url>/2025/02/10/aboutMe/</url>
      
        <content type="html"><![CDATA[<h1 id="Biography"><a href="#Biography" class="headerlink" title="Biography"></a>Biography</h1><p>I am currently a junior at the School of Electronic Engineering and Computer Science at Peking University, where my research interests lie at the intersection of hardware architecture design and machine learning, with a particular focus on hardware-software co-design. This field excites me because it bridges the gap between efficient hardware systems and intelligent algorithms, offering transformative potential for modern computing.</p><p>Building on a strong foundation in hardware design from my undergraduate studies, along with research experience in AI chip development, I am eager to deepen my expertise and contribute to groundbreaking innovations in the field. I plan to continue my graduate studies in the fall of 2026, and I am currently seeking a fall research internship to further develop my skills and knowledge.</p><p>Feel free to reach out to me anytime. You can find my CV <a href="https://worldline22.github.io/pdf/CV.pdf">here</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在前面</title>
      <link href="/2024/07/28/preinfo/"/>
      <url>/2024/07/28/preinfo/</url>
      
        <content type="html"><![CDATA[<ol><li>这是我的个人博客，本网站将不定期更新自己科研、生活上的点点滴滴，希望你能喜欢。</li><li>网页分为“黑&#x2F;白”两种模式可供选择，右下角设置键可以修改模式。</li><li>本网页目前评论功能只支持拥有github账号的访客使用，评论时请使用自己的github账号登录，注意评论文明，感谢你的浏览(❤ ω ❤)。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
