<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ASIP Designer Processor Modeling</title>
      <link href="/2025/07/02/asip_design_tool/asip_training_processor_modeling/"/>
      <url>/2025/07/02/asip_design_tool/asip_training_processor_modeling/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Why-and-How-to-Design-an-ASIP"><a href="#Why-and-How-to-Design-an-ASIP" class="headerlink" title="Why and How to Design an ASIP?"></a>Why and How to Design an ASIP?</h2><p>Application-Specific Instruction-set Processors (ASIPs) bridge the gap between general-purpose microprocessors and dedicated hardware, offering:</p><ul><li>Maximum performance</li><li>Minimal power consumption</li><li>Programmability</li></ul><p>The core steps in ASIP design include:</p><ul><li><strong>Modeling the Instruction Set Architecture (ISA):</strong> Using the nML language to define the processor’s structure.</li><li><strong>Automatic Software Development Kit (SDK) Generation:</strong> Produces a C compiler and related tools.</li><li><strong>Algorithm-Driven Architectural Exploration:</strong> Utilizes a “Compile-in-the-Loop” approach to optimize the architecture.</li><li><strong>Automatic Synthesizable RTL Generation:</strong> Employs a “Synthesis-in-the-Loop” methodology for hardware implementation.</li></ul><p><img src="/image/img_asip_design/intro_asip_design_overview.png" alt="ASIP Design Overview"></p><h2 id="Processor-Modeling"><a href="#Processor-Modeling" class="headerlink" title="Processor Modeling"></a>Processor Modeling</h2><h3 id="Header-File"><a href="#Header-File" class="headerlink" title="Header File"></a>Header File</h3><p>The core header file, <code>&lt;processor&gt;.h</code>, defines primitive functions and data types within a dedicated namespace: <code>namespace &lt;processor&gt;_primitive &#123;&#125;</code>. It should include:</p><ul><li>Primitive data type definitions</li><li>Primitive function declarations</li><li>Primitive data type conversion rules</li></ul><p>Additional header files, such as <code>&lt;processor&gt;_&lt;function&gt;.h</code>, can be created to extend functionality with more operations or features.</p><h3 id="nML-Language"><a href="#nML-Language" class="headerlink" title="nML Language"></a>nML Language</h3><p>The nML language defines the structural skeleton and instruction-set architecture of the processor. Key components include:</p><ul><li><code>mem</code>: Defines memory spaces.</li><li><code>reg</code>: Specifies register structures.</li><li><code>pipe</code>: Stores values across pipeline stages (persistent).</li><li><code>trn</code>: Holds temporary values within a single stage.</li><li><code>opn</code>: Represents operation nodes.</li><li><code>cst</code>: Declares type conversion rules.</li><li><code>action</code>: Defines instruction behavior.</li><li><code>image</code>: Specifies binary encoding for instructions.</li><li><code>syntax</code>: Defines the assembly code representation.</li></ul><p>Example nML code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">opn alu_inst (op:opcode, x:c2u, y:c2u, val:c16s) &#123;</span><br><span class="line">  action &#123;</span><br><span class="line">    stage EX1:</span><br><span class="line">    A = R[x];</span><br><span class="line">    B = val;</span><br><span class="line">    switch (op) &#123;</span><br><span class="line">      case add: C = add(A, B) @alu;</span><br><span class="line">      case sub: C = sub(A, B) @alu;</span><br><span class="line">      case and: C = band(A, B) @alu;</span><br><span class="line">      case or:  C = bor(A, B) @alu;</span><br><span class="line">    &#125;</span><br><span class="line">    stage EX2:</span><br><span class="line">    R[y] = C;</span><br><span class="line">  &#125;</span><br><span class="line">  syntax: op &quot; R&quot; y &quot;, R&quot; x &quot;, &quot; val; # Displays as &lt;add R1, R2, val&gt;</span><br><span class="line">  image: &quot;0&quot;::op::x::y::val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Primitive-Definitions"><a href="#Primitive-Definitions" class="headerlink" title="Primitive Definitions"></a>Primitive Definitions</h3><p>Primitive definitions, written in <code>&lt;processor&gt;.p</code> files, use the Primitive Definition Language (PDG), which is based on C and supports operators, conditions, iterations, and functions with fixed types. PDG definitions are convertible to C++, VHDL, or Verilog.</p><p>Example PDG code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">word add(word a, word b, astat&amp; s)</span><br><span class="line">&#123;</span><br><span class="line">  int17_t aa = (uint16_t)a; // Zero extension</span><br><span class="line">  int17_t bb = (uint16_t)b;</span><br><span class="line">  int17_t d = aa + bb;</span><br><span class="line">  s = (d[16]^d[15]) :: (d &lt; 0) :: (d == 0);</span><br><span class="line">  return d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ASIP-Designer-Tool-Features"><a href="#ASIP-Designer-Tool-Features" class="headerlink" title="ASIP Designer Tool Features"></a>ASIP Designer Tool Features</h2><h3 id="ChessDE"><a href="#ChessDE" class="headerlink" title="ChessDE"></a>ChessDE</h3><p>The ChessDE tool, typically run on Linux via command line, offers:</p><ul><li>Configuration management</li><li>Function-level incremental compilation</li><li>Parallel compilation on multi-core hosts</li></ul><p>For Instruction Set Simulator (ISS) development, it supports:</p><ul><li>Bit-true, cycle-accurate, or instruction-accurate simulation</li><li>Just-in-time compilation</li><li>Performance and speed profiling</li><li>Automatic verification</li></ul><h1 id="Primitives"><a href="#Primitives" class="headerlink" title="Primitives"></a>Primitives</h1><h2 id="Declaring-Primitives"><a href="#Declaring-Primitives" class="headerlink" title="Declaring Primitives"></a>Declaring Primitives</h2><p>Primitive types are defined using C++-style class declarations within a namespace, formatted as <code>class &lt;type&gt; property(format)</code>. Example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> tinycore2_primitive &#123;</span><br><span class="line">  <span class="function"><span class="keyword">class</span> word <span class="title">property</span><span class="params">(<span class="number">16</span> bit <span class="type">signed</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">class</span> pmtype <span class="title">property</span><span class="params">(<span class="number">13</span> bit <span class="type">unsigned</span>)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">class</span> sbyte <span class="title">property</span><span class="params">(<span class="number">8</span> bit <span class="type">signed</span>)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Primitive functions represent user-defined behaviors and are categorized into:</p><ul><li><strong>Named Functions:</strong> Standard function declarations.</li><li><strong>Conversion Constructors:</strong> Handle type conversions, such as numbers or vectors.</li></ul><p>Example conversion:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sint8</span>(sin8)    <span class="comment">// xxxxxxxx -&gt; ssssssssxxxxxxxx</span></span><br><span class="line"><span class="built_in">vword3</span>(vbyte3) <span class="comment">// __ef __10 __ab -&gt; ffef 0010 ffab</span></span><br></pre></td></tr></table></figure><p>Example primitive function declaration:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> mycore_primitive &#123;</span><br><span class="line">  <span class="function"><span class="keyword">class</span> stat <span class="title">property</span><span class="params">(<span class="number">3</span> bit <span class="type">unsigned</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">word <span class="title">sub</span><span class="params">(word, word)</span></span>;</span><br><span class="line">  <span class="function">word <span class="title">sub</span><span class="params">(word, word, stat&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">word</span> &#123;</span><br><span class="line">    <span class="built_in">word</span>(sbyte);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Primitive-Definitions-1"><a href="#Primitive-Definitions-1" class="headerlink" title="Primitive Definitions"></a>Primitive Definitions</h2><p>Primitive definitions, written in PDG (based on C), exclude control flow primitives and type conversions. PDG supports C-like operations and control flows. Example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int16_t</span> INT16_MAX = <span class="number">0x7fff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int16_t</span> INT16_MIN = <span class="number">-0x8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">word <span class="title">sat16</span><span class="params">(<span class="type">int17_t</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; INT16_MAX)</span><br><span class="line">    <span class="keyword">return</span> INT16_MAX;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; INT16_MIN)</span><br><span class="line">    <span class="keyword">return</span> INT16_MIN;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">word <span class="title">adds</span><span class="params">(word a, word b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int17_t</span> sum = (<span class="type">int17_t</span>)a + (<span class="type">int17_t</span>)b;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sat16</span>(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The PDG tool structure is illustrated below:<br><img src="/image/img_asip_design/PDG_tool.png" alt="PDG Tool Structure"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Primitives consist of data types and functions, organized into:</p><ul><li><strong>Declaration:</strong> Defined in <code>&lt;processor&gt;.h</code></li><li><strong>Definition:</strong> Implemented in <code>&lt;processor&gt;.p</code></li></ul><p>These files collectively enable the modeling, simulation, and synthesis of ASIP designs using the ASIP Designer Tool.</p><h1 id="nML"><a href="#nML" class="headerlink" title="nML"></a>nML</h1><p>In this session, we provides a concise and structured overview of the nML (nested Machine Language) processor description language used for retargeting ASIP Designer tools. nML enables a unified model of processor architecture, capturing instruction behavior, resource connectivity, and hierarchical rules in a single description.</p><h2 id="Key-Features"><a href="#Key-Features" class="headerlink" title="Key Features"></a>Key Features</h2><ul><li><strong>Hierarchical</strong>: The ISA is defined as a hierarchy of rules, allowing modular and composable instruction definitions.</li><li><strong>Structural</strong>: Processor resources (registers, memories, transitories) and their interconnections are explicitly modeled, facilitating clear design and analysis.</li><li><strong>RT-Level</strong>: Instruction behavior is described in terms of register-transfer (RT) operations, capturing the flow of data between storage elements.</li></ul><p>nML integrates datapath descriptions, instruction-set encodings, and RT behavior in one language, simplifying retargeting and tool support.</p><hr><h2 id="Structural-Skeleton"><a href="#Structural-Skeleton" class="headerlink" title="Structural Skeleton"></a>Structural Skeleton</h2><h3 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h3><p>Registers are declared using:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Register file</span></span><br><span class="line"><span class="keyword">reg</span> name[size] &lt;data_type, addr_type&gt;;</span><br><span class="line"><span class="comment">// Single register</span></span><br><span class="line"><span class="keyword">reg</span> name&lt;data_type&gt;;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Aliases</strong>: Slice a register file into smaller files or individual registers:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> R[<span class="number">8</span>]&lt;word,b3u&gt;;</span><br><span class="line"><span class="keyword">reg</span> S[<span class="number">4</span>]&lt;word,b2u&gt; <span class="keyword">alias</span> R[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">reg</span> T[<span class="number">2</span>]&lt;word,b1u&gt; <span class="keyword">alias</span> R[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">reg</span> sp&lt;word&gt;      <span class="keyword">alias</span> S[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li><li><p><strong>Record Aliases</strong>: Combine consecutive fields of a register file into a wider view:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> R[<span class="number">8</span>]&lt;word,b3u&gt;;</span><br><span class="line"><span class="keyword">reg</span> L[<span class="number">4</span>]&lt;longword,b2u&gt; <span class="keyword">alias</span> R;  <span class="comment">// 2-word record alias</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Record Structures</strong>: Merge narrow storages into a single wide register:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> R[<span class="number">8</span>]&lt;word,b3u&gt;;</span><br><span class="line"><span class="keyword">reg</span> S[<span class="number">8</span>]&lt;<span class="keyword">byte</span>,b3u&gt;;</span><br><span class="line"><span class="keyword">reg</span> T[<span class="number">8</span>]&lt;w24,b3u&gt; &#123; R; S; &#125;;</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>Register Range Aliases</th><th>Register Record Alias</th><th>Register Record Structure</th></tr></thead><tbody><tr><td><img src="/image/img_asip_design/reg_range_alias.png" alt="Register Range Aliases"></td><td><img src="/image/img_asip_design/reg_record_alias.png" alt="Register Record Alias"></td><td><img src="/image/img_asip_design/reg_record_stru.png" alt="Register Record Structure"></td></tr></tbody></table><h3 id="Memories"><a href="#Memories" class="headerlink" title="Memories"></a>Memories</h3><p>Memories are static storage elements whose values persist until written.</p><ul><li><p><strong>Declaration</strong>:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Simple memory declaration</span></span><br><span class="line">mem name[size, step_opt] &lt;data_type, addr_type&gt;;</span><br><span class="line">mem name[from.<span class="variable">.to</span>, step_opt] &lt;data_type, addr_type&gt;;</span><br></pre></td></tr></table></figure><p><strong>Examples</strong>:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mem PM[dmSize]           &lt;pmtype, word&gt; read(pmLdBus);</span><br><span class="line">mem DM[dmSize]           &lt;word, word&gt; read(dmLdBus) write(dmStBus);</span><br></pre></td></tr></table></figure></li><li><p><strong>Explicit Interface</strong>:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mem DM[dmSize]&lt;word, word&gt; access &#123;</span><br><span class="line">  ld_dm: dmLdBus‘<span class="number">1</span>‘ = DM[dmAddr];</span><br><span class="line">  st_dm: DM[dmAddr] = dmStBus;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Timing can be annotated absolutely (by stage name) or relatively:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Absolute</span></span><br><span class="line">dmLdBus‘EX‘ = DM[dmAddr`ID`]`EX`;</span><br><span class="line"><span class="comment">// Relative</span></span><br><span class="line">dmLdBus‘<span class="number">1</span>‘  = DM[dmAddr]`<span class="number">1</span>`;</span><br></pre></td></tr></table></figure></li><li><p><strong>Memory Record Aliases</strong>: Map consecutive memory fields into wider views.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Aligned accesses</span></span><br><span class="line">mem bDM[<span class="number">1024</span>,<span class="number">1</span>]&lt;<span class="keyword">byte</span>,addr&gt;;</span><br><span class="line">mem wDM[<span class="number">1024</span>,<span class="number">2</span>]&lt;word,addr&gt; <span class="keyword">alias</span> bDM;</span><br><span class="line">mem lDM[<span class="number">1024</span>,<span class="number">4</span>]&lt;longword,addr&gt; <span class="keyword">alias</span> bDM;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unaligned accesses</span></span><br><span class="line">mem bDM[<span class="number">1024</span>,<span class="number">1</span>]&lt;<span class="keyword">byte</span>,addr&gt;;</span><br><span class="line">mem wDMu[<span class="number">0</span>.<span class="variable">.1022</span>,<span class="number">1</span>]&lt;word,addr&gt; <span class="keyword">alias</span> bDM align <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>Memory Inteface</th><th>Memory Align</th></tr></thead><tbody><tr><td><img src="/image/img_asip_design/mem_interface.png" alt="mem interface"></td><td><img src="/image/img_asip_design/mem_align.png" alt="mem align"></td></tr></tbody></table><h3 id="Transitories-and-Pipeline-Registers"><a href="#Transitories-and-Pipeline-Registers" class="headerlink" title="Transitories and Pipeline Registers"></a>Transitories and Pipeline Registers</h3><ul><li><p><strong>Transitories</strong> lose their value before the end of a clock cycle and must be read in the same stage they are written:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">trn Xbus&lt;word&gt;;</span><br><span class="line">trn Ybus&lt;word&gt;;</span><br><span class="line">trn XYbus&lt;longword&gt; &#123; Xbus; Ybus; &#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>Pipeline Registers</strong> function like transitories but pass values to the next stage:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipe pA&lt;word&gt;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Enumeration-Types-and-Constants"><a href="#Enumeration-Types-and-Constants" class="headerlink" title="Enumeration Types and Constants"></a>Enumeration Types and Constants</h3><ul><li><p><strong>Enums</strong>:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> alu_op  &#123; ADD <span class="string">&quot;+&quot;</span>, SUB <span class="string">&quot;-&quot;</span>, AND <span class="string">&quot;&amp;&quot;</span>, OR <span class="string">&quot;|&quot;</span> &#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>Constants</strong>:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def size = <span class="number">2</span>**<span class="number">16</span>;</span><br><span class="line">mem DM[size]&lt;num,addr&gt;;</span><br><span class="line"></span><br><span class="line">cst c_byte&lt;<span class="keyword">byte</span>&gt;;</span><br><span class="line">cst c_3u  &lt;threebitsu&gt;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Processor-Properties"><a href="#Processor-Properties" class="headerlink" title="Processor Properties"></a>Processor Properties</h3><p>Properties identify elements with special processor-level meaning:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">properties &#123;</span><br><span class="line">  program_memory   : PM;</span><br><span class="line">  program_counter  : PC;</span><br><span class="line">  endianness       : little;</span><br><span class="line">  decode_stage     : ID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">property</span> unconnected : REGX;</span><br></pre></td></tr></table></figure><hr><h2 id="Instruction-Set-Definition"><a href="#Instruction-Set-Definition" class="headerlink" title="Instruction Set Definition"></a>Instruction Set Definition</h2><h3 id="OR-Rules"><a href="#OR-Rules" class="headerlink" title="OR Rules"></a>OR Rules</h3><p>Define alternatives for instruction parts:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">opn tinycore2 (alu_opn | compare_opn | ... | generate_byte) &#123;</span><br><span class="line">  image: <span class="string">&quot;000000&quot;</span>::alu_opn</span><br><span class="line">       | <span class="string">&quot;000001&quot;</span>::compare_opn</span><br><span class="line">       | ...</span><br><span class="line">       | <span class="string">&quot;100&quot;</span>::generate_byte;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AND-Rules"><a href="#AND-Rules" class="headerlink" title="AND Rules"></a>AND Rules</h3><p>Compose instruction fields orthogonally. Include:</p><ul><li><strong>Action</strong> (RT behavior)</li><li><strong>Syntax</strong> (assembly representation)</li><li><strong>Image</strong> (binary encoding)</li></ul><p><strong>Example</strong>:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">opn alu_opn (op: alu_op, a: eR, b: eR) &#123;</span><br><span class="line">  action &#123;</span><br><span class="line">    operandA = R[a];</span><br><span class="line">    operandB = R[b];</span><br><span class="line">    aluC    = (op == ADD) ? add(operandA, operandB)</span><br><span class="line">             : (op == SUB) ? sub(operandA, operandB)</span><br><span class="line">             : (op == AND) ? band(operandA, operandB)</span><br><span class="line">             : bor(operandA, operandB);</span><br><span class="line">    R[a]    = aluC;</span><br><span class="line">  &#125;</span><br><span class="line">  syntax: a <span class="string">&quot; = &quot;</span> a op b;</span><br><span class="line">  image : op::a::b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Parallel Composition</strong>:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">opn alu_load (op: alu_opn, ld: load_indirect) &#123;</span><br><span class="line">  action &#123; op; ld; &#125;</span><br><span class="line">  syntax: op <span class="string">&quot; || &quot;</span> ld;</span><br><span class="line">  image : op::ld;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Pipelines-and-Hazards"><a href="#Pipelines-and-Hazards" class="headerlink" title="Pipelines and Hazards"></a>Pipelines and Hazards</h2><h3 id="Describing-Pipelines"><a href="#Describing-Pipelines" class="headerlink" title="Describing Pipelines"></a>Describing Pipelines</h3><ol><li>Declare pipeline registers (<code>pipe</code>).</li><li>Define stages and nested scopes.</li><li>Annotate storage accesses with stage information.</li></ol><p><strong>Example</strong> (multi-accumulate operation):</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> stages &#123; IF, ID, RD, E1, E2 &#125;;</span><br><span class="line"></span><br><span class="line">pipe mA&lt;word&gt;;</span><br><span class="line">pipe mB&lt;word&gt;;</span><br><span class="line"><span class="keyword">reg</span>  ACC&lt;longword&gt; read(ta) write(tb);</span><br><span class="line"></span><br><span class="line">opn macc_opn (op: mult_add_sub, a: eR, b: eR) &#123;</span><br><span class="line">  action &#123;</span><br><span class="line">    stage RD:</span><br><span class="line">      mA = R[a]; mB = R[b];</span><br><span class="line">    stage E1.<span class="variable">.E2</span>:</span><br><span class="line">      tb`E2` = (op == mult_add)</span><br><span class="line">              ? mult_add(ta`E2`, mA`E1`, mB`E1`)</span><br><span class="line">              : mult_sub(ta`E2`, mA`E1`, mB`E1`);</span><br><span class="line">    stage E2:</span><br><span class="line">      ACC = tb;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pipeline-Hazards"><a href="#Pipeline-Hazards" class="headerlink" title="Pipeline Hazards"></a>Pipeline Hazards</h3><ul><li><p><strong>Control Hazards</strong>: Use <code>cycles(n)</code> or <code>delay_slots(n)</code> to model jump delays.</p></li><li><p><strong>Data &amp; Structural Hazards</strong>:</p><ul><li>Softwall stalls (insert NOPs)</li><li>Hardware stalls</li><li>Bypassing (forwarding)</li></ul></li></ul><p>For detailed hazard mitigation strategies, refer to the <a href="https://en.wikipedia.org/wiki/Hazard_%28computer_architecture%29">Hazard (computer architecture) Wiki</a>.</p><hr><h2 id="Mode-Rules"><a href="#Mode-Rules" class="headerlink" title="Mode Rules"></a>Mode Rules</h2><p>Define how storage locations are addressed.</p><h3 id="Register-Mode"><a href="#Register-Mode" class="headerlink" title="Register Mode"></a>Register Mode</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mode mR (e: eR) &#123;</span><br><span class="line">  value : R[e];</span><br><span class="line">  syntax: e;</span><br><span class="line">  image : e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Memory-Mode"><a href="#Memory-Mode" class="headerlink" title="Memory Mode"></a>Memory Mode</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mode ind_ld_st (a: eR) &#123;</span><br><span class="line">  value  : DM[dmAddr = R[a]];</span><br><span class="line">  action : R[a] = add(R[a], <span class="number">1</span>);</span><br><span class="line">  syntax : <span class="string">&quot;DM[&quot;</span> a <span class="string">&quot;+&quot;</span>]<span class="string">&quot;;</span></span><br><span class="line"><span class="string">  image  : a;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Image-Attributes"><a href="#Image-Attributes" class="headerlink" title="Image Attributes"></a>Image Attributes</h2><p>Define binary encodings:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">opn arith_instr (alu_instr | as_sh_instr | shift_instr | macc_rnd_nop_instr) &#123;</span><br><span class="line">  image: <span class="string">&quot;00&quot;</span>::alu_instr</span><br><span class="line">       | <span class="string">&quot;01&quot;</span>::as_sh_instr</span><br><span class="line">       | <span class="string">&quot;10&quot;</span>::shift_instr</span><br><span class="line">       | <span class="string">&quot;11&quot;</span>::macc_rnd_nop_instr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use <code>complete_image</code> when orthogonality of fields must be enforced.</p><h1 id="PAG-Modules"><a href="#PAG-Modules" class="headerlink" title="PAG Modules"></a>PAG Modules</h1><h2 id="Modeling-the-Processor-Control-Unit"><a href="#Modeling-the-Processor-Control-Unit" class="headerlink" title="Modeling the Processor Control Unit"></a>Modeling the Processor Control Unit</h2><p>The Processor Control Unit (PCU) orchestrates instruction fetch, issue, and program-counter updates, managing boot sequence states and supporting control-flow constructs such as jumps, calls, and returns. In our PDG-based implementation, all PCU logic resides in <code>&lt;processor&gt;_pcu.p</code>, which must include:</p><ul><li><p><strong>Storage declarations</strong> for PCU-specific registers and nML-managed state:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pcu_storages &#123;</span><br><span class="line">  <span class="keyword">reg</span> reg_booting&lt;uint2_t&gt;;  <span class="comment">// Tracks reset, boot, run states</span></span><br><span class="line">  trn pc_step&lt;addr&gt;;         <span class="comment">// Pipeline-step tracking (if needed)</span></span><br><span class="line">&#125;</span><br><span class="line">hw_init reg_booting = <span class="number">1</span>;     <span class="comment">// Initialize booting state</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Auxiliary helper functions</strong> for conditional checks or bit manipulations.</p></li><li><p>A <strong><code>user_issue()</code></strong> function that reads the fetched instruction from the PM output bus (<code>pmLdBus</code>) and invokes <code>issue_instr()</code> once the PCU exits boot.</p></li><li><p>A <strong><code>user_next_pc()</code></strong> function that computes the next PC based on control-flow signals, boot state, and sequential increments.</p></li></ul><h2 id="Fetching-and-Issuing-Instruction"><a href="#Fetching-and-Issuing-Instruction" class="headerlink" title="Fetching and Issuing Instruction"></a>Fetching and Issuing Instruction</h2><p>Instruction fetch is fully pipelined in two phases:</p><ol><li><p><strong>Prefetch (PF)</strong>: Drive the next PC address onto the PM address bus:</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm_read`<span class="number">1</span>` = PM[pm_addr `<span class="number">0</span>` = nextpc] `<span class="number">0</span>`;</span><br></pre></td></tr></table></figure></li><li><p><strong>Fetch (IF)</strong>: Sample the instruction when <code>pmLdBus</code> is asserted:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pmtype f_instr = pm_read;</span><br></pre></td></tr></table></figure></li></ol><p>After a successful fetch, <code>user_issue()</code> sends <code>f_instr</code> into the downstream decode stage. On architectures with multi-cycle instructions, <code>issue_sig()</code> remains low for the remaining cycles of the previous instruction, preventing new issues until ready.</p><h2 id="Updating-the-PC"><a href="#Updating-the-PC" class="headerlink" title="Updating the PC"></a>Updating the PC</h2><h3 id="Straight-Line-Execution"><a href="#Straight-Line-Execution" class="headerlink" title="Straight-Line Execution"></a>Straight-Line Execution</h3><p>For ordinary sequential code, the PC simply increments by one. In nML and PDG, this appears as two coupled actions:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tinycore2.n</span></span><br><span class="line"><span class="keyword">reg</span> PC&lt;word&gt; read (pc_r) write (pc_w);</span><br><span class="line"></span><br><span class="line"><span class="comment">// tinycore2_pcu.p</span></span><br><span class="line"><span class="keyword">void</span> tinycore2::user_next_pc() &#123;</span><br><span class="line">  pc_r = PC;</span><br><span class="line">  word nextpc;</span><br><span class="line">  <span class="keyword">if</span> (is_control_flow_instruction(f_instr))</span><br><span class="line">    nextpc = compute_branch_target();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    nextpc = pc_r + <span class="number">1</span>;</span><br><span class="line">  PC = pc_w = nextpc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Conditional-and-Unconditional-Jumps"><a href="#Conditional-and-Unconditional-Jumps" class="headerlink" title="Conditional and Unconditional Jumps"></a>Conditional and Unconditional Jumps</h3><p>Relative and absolute jumps are declared in the nML header:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">jumpi</span><span class="params">(sbyte)</span> <span class="title">property</span><span class="params">(relative jump)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jumpci</span><span class="params">(<span class="type">bool</span>, sbyte)</span> <span class="title">property</span><span class="params">(relative jump)</span></span>;</span><br></pre></td></tr></table></figure><p>The PCU models them by checking <code>jump_pc_offs_sig</code> (relative) and <code>jump_pc_trgt_sig</code> (absolute), routing <code>pc_r + offset</code> or <code>pc_trgt</code> accordingly.</p><h3 id="Subroutine-Calls-and-Returns"><a href="#Subroutine-Calls-and-Returns" class="headerlink" title="Subroutine Calls and Returns"></a>Subroutine Calls and Returns</h3><p>Subroutine calls (<code>bsr</code>) and returns (<code>rst</code>) use a link register to save return addresses, respecting architectural delay slots:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">word <span class="title">bsr</span><span class="params">(word)</span> <span class="title">property</span><span class="params">(absolute call)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rst</span><span class="params">(word)</span> <span class="title">property</span><span class="params">(ret)</span></span>;</span><br></pre></td></tr></table></figure><p>The model captures this in <code>user_next_pc()</code> by setting <code>lnk_pf = pc_r + 1</code> before control-flow resolution and reading it back on <code>rst</code>.</p><h3 id="Boot-Sequence"><a href="#Boot-Sequence" class="headerlink" title="Boot Sequence"></a>Boot Sequence</h3><p>The PCU tracks three states in <code>reg_booting</code>: 2 (reset), 1 (first boot cycle), and 0 (run). During reset, fetch is disabled; in the first boot cycle, only fetch is enabled; thereafter, normal issue&#x2F;fetch resumes.</p><p><img src="/image/img_asip_design/pcu_booting.png" alt="Boot State Diagram"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">pcu_storages &#123;</span><br><span class="line">  reg reg_booting&lt;<span class="type">uint2_t</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line">hw_init reg_booting = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tinycore2::user_issue</span><span class="params">()</span> &#123;</span><br><span class="line">  pmtype f_instr = pmLdBus;</span><br><span class="line">  <span class="keyword">if</span> (reg_booting == <span class="number">0</span>)</span><br><span class="line">    issue_instr(pc_r = PC, <span class="number">1</span>, f_instr);</span><br><span class="line">  reg_booting &gt;&gt;= <span class="number">1</span>;  <span class="comment">// Shift through reset→boot→run</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tinycore2::user_next_pc</span><span class="params">()</span> &#123;</span><br><span class="line">  lnk_pf = (pc_r = PC) + <span class="number">1</span>;</span><br><span class="line">  <span class="type">bool</span> allow_fetch = (reg_booting != <span class="number">2</span>);</span><br><span class="line">  word nextpc;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (reg_booting == <span class="number">1</span>)</span><br><span class="line">    allow_fetch = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (jump_pc_offs_sig)</span><br><span class="line">    nextpc = pc_r + pc_offs;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (jump_pc_trgt_sig)</span><br><span class="line">    nextpc = pc_trgt;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (loop_test())</span><br><span class="line">    nextpc = ls_r = LS;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    nextpc = pc_r + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  PC = pc_w = nextpc;</span><br><span class="line">  <span class="keyword">if</span> (allow_fetch)</span><br><span class="line">    pmLdBus`<span class="number">1</span>` = PM[pmAddr`<span class="number">0</span>` = nextpc]`<span class="number">1</span>`;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Manipulating-the-Pipeline"><a href="#Manipulating-the-Pipeline" class="headerlink" title="Manipulating the Pipeline"></a>Manipulating the Pipeline</h2><ul><li><p><strong>Hardware stalls</strong>: Temporarily pause issue and fetch via stall rules:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hw_stall <span class="number">1.</span>.<span class="number">2</span> cycles &#123;</span><br><span class="line">  stage E3: R[#] = ...;</span><br><span class="line">&#125; -&gt; &#123;</span><br><span class="line">  stage E1: ... = R[#];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Instruction kills</strong>: Abort an in-flight instruction on a condition:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (&lt;condition&gt;)</span><br><span class="line">  kill_instr(instr_id);</span><br></pre></td></tr></table></figure></li><li><p><strong>Pipeline stalls</strong>: Prevent issue of new instructions while a long-latency unit is busy:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (div_busy)</span><br><span class="line">  stall_instr(E1);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Modeling-Multi-Cycle-Functional-Units"><a href="#Modeling-Multi-Cycle-Functional-Units" class="headerlink" title="Modeling Multi-Cycle Functional Units"></a>Modeling Multi-Cycle Functional Units</h2><p>Multi-Cycle Functional Units (MCFUs) implement operations spanning multiple clock cycles (e.g., division). Each MCFU is a standalone PDG module with:</p><ul><li><strong>Local state</strong>: operand registers, iteration counters (e.g., <code>Cnt&lt;uint5_t&gt;</code>), and busy signals.</li><li><strong>Primitive declaration</strong> in the header with <code>property(multicycle_N)</code>.</li><li><strong>nML action</strong> specifying read&#x2F;write ports and initial invocation.</li><li><strong>PDG <code>process()</code></strong> function that drives the iterative algorithm and updates <code>div_busy</code>.</li></ul><p><strong>Example: Non-Restoring Division</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Primitive</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">divide</span><span class="params">(word a, word b, word&amp; q, word&amp; r)</span> <span class="title function_">property</span><span class="params">(multicycle_16)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// nML action</span><br><span class="line">opn divide (a : c_3, b : c_3) &#123;</span><br><span class="line">  action &#123; stage EX: divide(ta=R[a], tb=R[b], Q=qw, M=mw); &#125;</span><br><span class="line">  image : a, b, cycles(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PDG module</span></span><br><span class="line">multicycle_fu div &#123;</span><br><span class="line">  reg B&lt;uint16&gt;;</span><br><span class="line">  reg Cnt&lt;uint5&gt;;</span><br><span class="line">  <span class="type">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (vd_divide_ta_tb_qw_mw_EX_sig) &#123;</span><br><span class="line">      Q = qw = ta;</span><br><span class="line">      M = mw = tb;</span><br><span class="line">      Cnt = <span class="number">16</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">auto</span> [mq_new] = divide_step((mr=M, qr=Q), B);</span><br><span class="line">      M = mw = mq_new[<span class="number">31</span>:<span class="number">16</span>];</span><br><span class="line">      Q = qw = mq_new[<span class="number">15</span>:<span class="number">0</span>];</span><br><span class="line">      Cnt -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    div_busy = (Cnt != <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Modeling-IO-Interfaces"><a href="#Modeling-IO-Interfaces" class="headerlink" title="Modeling IO Interfaces"></a>Modeling IO Interfaces</h2><p>IO interfaces bridge abstract nML memory definitions to hardware-mapped memories. Each interface is a PDG module named <code>io_interface &lt;unit&gt; (MemorySpec)</code>, containing:</p><ol><li><strong>External interface</strong> <code>eMem</code> with inports and outports for <code>ld</code>&#x2F;<code>st</code> operations.</li><li><strong>Local storage</strong> registers (e.g., <code>st_ff</code>, <code>addr_ff</code>, <code>data_ff</code>) to buffer and delay signals.</li><li><strong><code>process_request()</code></strong> and <strong><code>process_result()</code></strong> routines to deconflict structural hazards and implement bypass logic.</li><li><strong><code>dbg_access_*</code></strong> helpers for simulator debugging and memory inspection.</li></ol><p><strong>Example: Load&#x2F;Store Bypass</strong></p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">io_interface bypass_dm (DM) &#123;</span><br><span class="line">  mem eDM[<span class="number">2</span>**<span class="number">16</span>]&lt;word,addr&gt; <span class="keyword">access</span> &#123;</span><br><span class="line">    e_ld: e_db`<span class="number">1</span>` = eDM[e_ab];</span><br><span class="line">    e_st: eDM[e_ab] = e_wb;</span><br><span class="line">  &#125;;</span><br><span class="line">  reg st_ff&lt;uint1&gt;;</span><br><span class="line">  reg addr_ff&lt;addr&gt;;</span><br><span class="line">  reg data_ff&lt;word&gt;;</span><br><span class="line">  reg valid_ff&lt;uint1&gt;;</span><br><span class="line">  reg match_ff&lt;uint1&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">process</span> process_result() &#123;</span><br><span class="line">    db = match_ff ? data_ff : e_db;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">process</span> process_request() &#123;</span><br><span class="line">    // <span class="keyword">Default</span> signals</span><br><span class="line">    e_ld = e_st = <span class="number">0</span>;</span><br><span class="line">    e_ab = ab; e_wb = wb;</span><br><span class="line"></span><br><span class="line">    // Load path</span><br><span class="line">    <span class="keyword">if</span> (ld_dm) &#123;</span><br><span class="line">      bool hit = (ab == addr_ff) &amp;&amp; (valid_ff || st_ff);</span><br><span class="line">      match_ff = hit;</span><br><span class="line">      e_ld = !hit;</span><br><span class="line">      <span class="keyword">if</span> (st_ff) &#123; data_ff = wb; valid_ff = <span class="number">1</span>; &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      // Drain <span class="keyword">buffer</span> <span class="keyword">or</span> pass-through store</span><br><span class="line">      <span class="keyword">if</span> (valid_ff) &#123;</span><br><span class="line">        e_st = <span class="number">1</span>; e_ab = addr_ff; e_wb = data_ff; valid_ff = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (st_ff) &#123;</span><br><span class="line">        e_st = <span class="number">1</span>; // normal store</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update delay registers</span><br><span class="line">    <span class="keyword">if</span> (st_dm) addr_ff = ab;</span><br><span class="line">    st_ff = st_dm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void dbg_access_DM(<span class="built_in">unsigned</span> a, word&amp; v, bool read) &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid_ff &amp;&amp; addr_ff == a)</span><br><span class="line">      v = data_ff;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      dbg_access_eDM(a, v, read);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Summary-MCFUs-vs-IO-Interfaces"><a href="#Summary-MCFUs-vs-IO-Interfaces" class="headerlink" title="Summary: MCFUs vs. IO Interfaces"></a>Summary: MCFUs vs. IO Interfaces</h2><table><thead><tr><th></th><th><strong>MCFU</strong></th><th><strong>IO Interface</strong></th></tr></thead><tbody><tr><td><strong>Purpose</strong></td><td>Execute compiler primitives over multiple cycles</td><td>Bridge nML memory spec to physical memory</td></tr><tr><td><strong>State</strong></td><td>Local registers, counters, busy flags</td><td>Buffers for data, addresses, valid&#x2F;match flags</td></tr><tr><td><strong>Control activation</strong></td><td>Driven by primitive invocation signals</td><td>Driven by load&#x2F;store handshakes</td></tr><tr><td><strong>Compiler view</strong></td><td>Abstract primitive call with fixed latency (<code>multicycle_N</code>)</td><td>Abstract memory interface with timing and port constraints</td></tr><tr><td><strong>Stall integration</strong></td><td>Implicit stall until <code>busy</code> is cleared</td><td>Explicit <code>in_wait_cycle()</code> checks and hazard bypass logic</td></tr></tbody></table><h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><h3 id="Overview-of-the-Chess-Compiler"><a href="#Overview-of-the-Chess-Compiler" class="headerlink" title="Overview of the Chess Compiler"></a>Overview of the Chess Compiler</h3><p><img src="/image/img_asip_design/chess_compile_overview.png" alt="Chess compiler overview"></p><p>The Chess compiler front end supports two pipelines—Chess and LLVM—and provides language bindings for C, C++, and OpenCL. Both pipelines translate the source code into a unified intermediate representation: a Control-Data Flow Graph (CDFG). This graph captures both control structures (branches, loops) and data dependencies, enabling advanced optimizations.</p><h4 id="Front-End"><a href="#Front-End" class="headerlink" title="Front End"></a>Front End</h4><ol><li><strong>Static Single Assignment (SSA):</strong> All variables are converted into SSA form to simplify data-flow analysis and enable precise value tracking.</li><li><strong>Induction-Variable Analysis:</strong> Detects loop-carried dependencies, transforms loop counters into affine functions, and optimizes pointer arithmetic within loops.</li><li><strong>Expression Flattening &amp; Chain Building:</strong> Breaks down complex pointer and arithmetic expressions into sequences of primitive operations, facilitating pattern matching and resource scheduling.</li></ol><h4 id="Back-End"><a href="#Back-End" class="headerlink" title="Back End"></a>Back End</h4><ol><li><strong>Pattern-Based Code Selection:</strong> Bundles subgraphs of the CDFG into hardware-specific patterns (Instruction Selection Graphs, ISGs) and maps them to the target processor’s instruction set.</li><li><strong>Register Allocation:</strong> Assigns live values to physical registers, spilling to memory only when necessary. Utilizes graph-coloring and priority-based heuristics to minimize spills.</li><li><strong>Scheduling:</strong> Orders instructions to respect data dependencies and maximize parallelism. Supports both list scheduling and modulo scheduling for loops, targeting low-latency and high-throughput architectures.</li></ol><hr><h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><h3 id="Mapping-of-Types"><a href="#Mapping-of-Types" class="headerlink" title="Mapping of Types"></a>Mapping of Types</h3><p>The header file <code>&lt;processor&gt;_chess.h</code> defines how C&#x2F;C++ types and operators map to the processor’s primitive types and functions. It also introduces Chess-specific directives (chess_properties) to guide resource usage.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Single-type mapping</span></span><br><span class="line">chess_properties &#123;</span><br><span class="line">  representation <span class="type">int</span>   : word;</span><br><span class="line">  representation <span class="type">void</span>* : addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Multi-type mapping</span></span><br><span class="line">chess_properties &#123;</span><br><span class="line">  representation <span class="type">int</span>, <span class="type">frac_t</span> : word;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>To customize storage for composite types, you can define a struct with the <code>property(keep_in_registers)</code> attribute:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> long_r <span class="title function_">property</span><span class="params">(keep_in_registers)</span> &#123;</span><br><span class="line">  <span class="type">unsigned</span> lo;</span><br><span class="line">  <span class="type">unsigned</span> hi;</span><br><span class="line">  long_r(<span class="type">unsigned</span> l, <span class="type">unsigned</span> h)</span><br><span class="line">    : lo(l), hi(h) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind the long C type to the long_r struct</span></span><br><span class="line">chess_properties &#123;</span><br><span class="line">  representation <span class="type">long</span> : long_r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Type Promotion:</strong> The compiler can allocate a narrower C type (e.g., <code>short</code>) into a wider hardware type (e.g., <code>word</code>) to reduce register pressure or align with the target datapath.</p><h3 id="Definition-of-Operators"><a href="#Definition-of-Operators" class="headerlink" title="Definition of Operators"></a>Definition of Operators</h3><p>Chess allows mapping C built-in operators to either primitive hardware functions or inline helper functions, enabling tight control over status registers and side effects.</p><ol><li><p><strong>Promotion to Primitive Functions</strong><br>Define a C++ operator by forwarding to a low-level primitive:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In &lt;processor&gt;.h</span></span><br><span class="line">namespace mycore_primitive &#123;</span><br><span class="line">  word <span class="title function_">sub</span><span class="params">(word a, word b, stat &amp;s)</span>; <span class="comment">// subtract with status update</span></span><br><span class="line">  <span class="type">bool</span> <span class="title function_">lt</span><span class="params">(stat s)</span>;                   <span class="comment">// test status for less-than</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In &lt;processor&gt;_chess.h</span></span><br><span class="line">namespace mycore_primitive &#123;</span><br><span class="line">  <span class="keyword">inline</span> <span class="type">bool</span> <span class="title function_">less_than</span><span class="params">(word a, word b)</span> &#123;</span><br><span class="line">    stat s;</span><br><span class="line">    sub(a, b, s);</span><br><span class="line">    <span class="keyword">return</span> lt(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map the C operator&lt; on ints to the primitive helper</span></span><br><span class="line">promotion <span class="type">bool</span> operator&lt;(<span class="type">int</span>, <span class="type">int</span>) = mycore_primitive::less_than(word, word);</span><br></pre></td></tr></table></figure></li><li><p><strong>Promotion to Inline Functions</strong><br>For more complex or composite operations, map operators to inline C++ functions:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="type">frac_t</span> operator+(<span class="type">frac_t</span> a, <span class="type">frac_t</span> b) &#123;</span><br><span class="line">  <span class="comment">// perform fractional addition using hardware-supported primitives</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">promotion <span class="type">frac_t</span> operator+(<span class="type">frac_t</span>, <span class="type">frac_t</span>) = inline_add_frac(<span class="type">frac_t</span>, <span class="type">frac_t</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>Pointer Arithmetic</strong><br>Chess directly supports pointer increments and differences by mapping <code>ptr + n</code> and <code>ptr1 - ptr2</code> onto address-unit primitives, preserving bounds information when available.</p></li><li><p><strong>Application-Specific Operators</strong><br>Extend the language with custom types—vectors, complex numbers, or fixed-point fractions—and define their arithmetic:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Complex multiplication</span></span><br><span class="line"><span class="keyword">inline</span> <span class="type">complex_t</span> operator*(<span class="type">complex_t</span> x, <span class="type">complex_t</span> y) &#123;</span><br><span class="line">  <span class="keyword">return</span> complex_mul_prim(x.real, x.imag, y.real, y.imag);</span><br><span class="line">&#125;</span><br><span class="line">promotion <span class="type">complex_t</span> operator*(<span class="type">complex_t</span>, <span class="type">complex_t</span>) = complex_mul_prim;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Intrinsic-Functions"><a href="#Intrinsic-Functions" class="headerlink" title="Intrinsic Functions"></a>Intrinsic Functions</h3><p>Intrinsic functions bypass C++ overload resolution and map directly onto one or more nML primitives. This mechanism supports heterogeneous operations—such as multiplying two 32-bit integers to produce a 64-bit result—and leverages specialized DSP or SIMD units:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Multiply two 32-bit ints into a 64-bit long</span></span><br><span class="line">intrinsic <span class="type">long</span> <span class="title function_">mul_int32_to_int64</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">  = nml_mul_32x32_to_64(a, b);</span><br></pre></td></tr></table></figure><p>These mappings ensure that high-level code retains the performance characteristics of the target architecture while maintaining readability and type safety.</p><hr><h2 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h2><h3 id="Support-of-Subroutines"><a href="#Support-of-Subroutines" class="headerlink" title="Support of Subroutines"></a>Support of Subroutines</h3><p>A subroutine in ASIP design corresponds to a C function at the hardware level. It is implemented using dedicated control flow instructions—<code>bsr</code> for subroutine call and <code>rts</code> for return. These instructions manage control flow, preserve register context, and handle memory interface operations. The compiler guarantees consistency through enforced calling conventions, enabling seamless software-hardware integration.</p><p>Defined in the primitive header file:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call</span></span><br><span class="line">word <span class="title function_">bsr</span><span class="params">(word)</span> <span class="title function_">property</span><span class="params">(absolute call)</span>;</span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rts</span><span class="params">(word)</span> <span class="title function_">property</span><span class="params">(ret)</span>;</span><br></pre></td></tr></table></figure><p>The <code>bsr</code> instruction saves the return address (often in a link register), while <code>rts</code> retrieves it to continue execution. The <code>link_register</code> is specified in the compiler header:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chess_properties &#123; link_register: LR; &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Data-Memory"><a href="#Data-Memory" class="headerlink" title="Data Memory"></a>Data Memory</h4><p>Memory regions are organized to support different storage classes:</p><ul><li><strong>DM</strong>: Default memory for general data.</li><li><strong>DMs</strong>: Static memory for persistent&#x2F;static variables.</li><li><strong>DMl</strong>: Local memory for stack frames and automatic (local) variables.</li></ul><p>This categorization helps in optimizing allocation and access according to variable scope and lifetime.</p><h4 id="Software-Stack"><a href="#Software-Stack" class="headerlink" title="Software Stack"></a>Software Stack</h4><p>Function-related stack manipulation is supported in ASIP design. A dedicated memory and register pair manage stack behavior, including direction (up&#x2F;down) and SP-relative addressing.</p><p>Stack configuration example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chess_properties &#123;</span><br><span class="line">   default_memories : DM, VDM;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// First software stack:</span></span><br><span class="line">   local_memory : DM; </span><br><span class="line">   stack_pointer : SP;</span><br><span class="line"></span><br><span class="line">chess_stack:</span><br><span class="line">   <span class="comment">// Second software stack:</span></span><br><span class="line">   local_memory : VDM; </span><br><span class="line">   stack_pointer : VSP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This allows support for multiple stacks, such as a scalar and vector stack. Each stack frame includes:</p><ul><li><strong>Locals area</strong></li><li><strong>Spill area</strong> (for register spilling and context save)</li><li><strong>Argument build area</strong></li></ul><p>These areas are sized per function and accessed using SP-relative addressing.</p><h4 id="Context-Saving"><a href="#Context-Saving" class="headerlink" title="Context Saving"></a>Context Saving</h4><p>Function calls may overwrite registers. To prevent data loss, ASIP supports two context-saving strategies:</p><table><thead><tr><th>Caller saved</th><th>Callee saved</th></tr></thead><tbody><tr><td>Prior to call, caller saves all regs in use in caller, to its spill area</td><td>After call, callee saves specified regs, if used by callee, to its spill area</td></tr><tr><td><img src="/image/img_asip_design/context_save_caller.png" alt="caller"></td><td><img src="/image/img_asip_design/context_save_callee.png" alt="callee"></td></tr></tbody></table><ul><li><p><strong>Caller-saved</strong>: Default for argument registers and enables inter-procedural optimizations.</p></li><li><p><strong>Callee-saved</strong>: Common in interrupt service routines, can be explicitly enabled via:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chess_properties &#123; callee_saved : R; &#125;</span><br></pre></td></tr></table></figure></li></ul><p>You can also define persistent values across calls:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value_across_call R4 : <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="Multi-Treading-Support"><a href="#Multi-Treading-Support" class="headerlink" title="Multi-Treading Support"></a>Multi-Treading Support</h4><p>ASIP offers both software and hardware mechanisms for thread-level context switching.</p><ul><li><strong>Software-based context save</strong>: The interrupt service routine (ISR) saves all used registers, with the cost proportional to the register count.</li><li><strong>Hardware-based support</strong>: Through <em>shadow registers</em>, which provide rapid context switching with minimal latency.</li></ul><p><img src="/image/img_asip_design/multi_sp.png" alt="Multi-Theading Support"></p><p>Advanced hardware schemes include:</p><ol><li><strong>Context shift ring (<code>context_shift_trn</code>)</strong></li><li><strong>Central register selector (<code>context_select_reg</code>)</strong></li><li><strong>Interleaved context issue (<code>context_issue_trn</code>)</strong></li></ol><p>This enables efficient multitasking with low overhead and supports deterministic behavior.</p><hr><h2 id="Part-4"><a href="#Part-4" class="headerlink" title="Part 4"></a>Part 4</h2><h3 id="Miscellaneous-topics"><a href="#Miscellaneous-topics" class="headerlink" title="Miscellaneous topics"></a>Miscellaneous topics</h3><p>To be updated.</p><p>Currently, the compiler supports a powerful mechanism for <em>property verification</em> through <strong>one-liners</strong>—compact function definitions used to verify compiler behavior.</p><p>One-liner tests cover:</p><ul><li>Constant generation</li><li>Stack manipulation and spill behavior</li><li>Register moves and argument passing</li><li>Operator correctness</li><li>Instruction-level parallelism</li><li>Multi-threading and context switching</li></ul><p>They are automatically generated and stored in:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lib/oneliners/oneliners.prx</span><br></pre></td></tr></table></figure><p>These form a lightweight, systematic test suite for validating compiler support against the C language features mapped to the ASIP model.</p>]]></content>
      
      
      <categories>
          
          <category> Computer Architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASIP design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Overview of ASIP design tool</title>
      <link href="/2025/07/01/asip_design_tool/Introduction_to_asip_design/"/>
      <url>/2025/07/01/asip_design_tool/Introduction_to_asip_design/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview-of-ASIP-Designer"><a href="#Overview-of-ASIP-Designer" class="headerlink" title="Overview of ASIP Designer"></a>Overview of ASIP Designer</h1><h2 id="What-Is-ASIP-Designer"><a href="#What-Is-ASIP-Designer" class="headerlink" title="What Is ASIP Designer"></a>What Is ASIP Designer</h2><p><strong>ASIP Designer</strong> is Synopsys’s tool for developing Application-Specific Instruction-set Processors (ASIPs). It lets you:</p><ul><li>Define custom processor architectures using <strong>nML</strong>, a high-level description language for ISA, registers, and memory</li><li>Generate software toolchains tailored to your ISA</li><li>Simulate performance and refine your design</li></ul><h2 id="Example-Project-tctcore"><a href="#Example-Project-tctcore" class="headerlink" title="Example Project: tctcore"></a>Example Project: <code>tctcore</code></h2><p>Before starting, set up the environment and load the required modules:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> asip_design/</span><br><span class="line"><span class="built_in">source</span> chess_env_LNa64.sh</span><br><span class="line">module load base</span><br><span class="line">module load asip_designer</span><br><span class="line">module load vcs</span><br></pre></td></tr></table></figure><p>In this example, we use the educational <code>tctcore</code> project to demonstrate the workflow.</p><h3 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h3><p><img src="/image/img_asip_design/tctcore_project_structure.png" alt="tctcore Project Structure"></p><h3 id="Generating-the-Simulation-Model"><a href="#Generating-the-Simulation-Model" class="headerlink" title="Generating the Simulation Model"></a>Generating the Simulation Model</h3><p>Run the model generation script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make_model</span><br></pre></td></tr></table></figure><p>Then compile the C&#x2F;C++ algorithm (e.g., <code>irrdirect</code>) and simulate it:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tctcore_chess.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Low-pass filter parameters:</span></span><br><span class="line"><span class="comment">//   Sample frequency (Hz)              : 44 000</span></span><br><span class="line"><span class="comment">//   Cut-off frequency (Hz)            : 5 000</span></span><br><span class="line"><span class="comment">//   Damping factor                     : 1.5</span></span><br><span class="line"><span class="comment">//   Data width (signed)                : 16 bits</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">1341</span>, b = <span class="number">5591</span>, g = <span class="number">16607</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> C[<span class="number">5</span>] = &#123; a, <span class="number">2</span>*a, a, g, -b &#125;;</span><br><span class="line"><span class="type">int</span> xd[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;, yd[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">low_pass</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">long</span> acc = fmult(x, C[<span class="number">0</span>])</span><br><span class="line">             + fmult(xd[<span class="number">0</span>], C[<span class="number">1</span>])</span><br><span class="line">             + fmult(xd[<span class="number">1</span>], C[<span class="number">2</span>])</span><br><span class="line">             + fmult(yd[<span class="number">0</span>], C[<span class="number">3</span>])</span><br><span class="line">             + fmult(yd[<span class="number">1</span>], C[<span class="number">4</span>]);</span><br><span class="line">    <span class="type">int</span> y = <span class="number">2</span> * (<span class="type">int</span>)round(acc);</span><br><span class="line">    xd[<span class="number">1</span>] = xd[<span class="number">0</span>]; xd[<span class="number">0</span>] = x;</span><br><span class="line">    yd[<span class="number">1</span>] = yd[<span class="number">0</span>]; yd[<span class="number">0</span>] = y;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">low_pass_v2</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">long</span> acc = fmult(x, C[<span class="number">0</span>]);</span><br><span class="line">    acc = fmacc(xd[<span class="number">0</span>], C[<span class="number">1</span>], acc);</span><br><span class="line">    acc = fmacc(xd[<span class="number">1</span>], C[<span class="number">2</span>], acc);</span><br><span class="line">    acc = fmacc(yd[<span class="number">0</span>], C[<span class="number">3</span>], acc);</span><br><span class="line">    acc = fmacc(yd[<span class="number">1</span>], C[<span class="number">4</span>], acc);</span><br><span class="line">    <span class="type">int</span> y = <span class="number">2</span> * (<span class="type">int</span>)round(acc);</span><br><span class="line">    xd[<span class="number">1</span>] = xd[<span class="number">0</span>]; xd[<span class="number">0</span>] = x;</span><br><span class="line">    yd[<span class="number">1</span>] = yd[<span class="number">0</span>]; yd[<span class="number">0</span>] = y;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> <span class="title function_">chess_storage</span><span class="params">(DM:<span class="number">256</span>)</span> input_port;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> <span class="title function_">chess_storage</span><span class="params">(DM:<span class="number">257</span>)</span> output_port;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        output_port = low_pass(input_port);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        output_port = low_pass_v2(input_port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code above illustrates two implementations:</p><ol><li><strong><code>low_pass</code></strong> uses basic multiply and add operations.</li><li><strong><code>low_pass_v2</code></strong> leverages the intrinsic <code>fmacc</code> for fused multiply-accumulate.</li></ol><p>Further details on nML structure will follow in subsequent sessions.</p><h2 id="HDL-ISS-and-Libraries"><a href="#HDL-ISS-and-Libraries" class="headerlink" title="HDL, ISS, and Libraries"></a>HDL, ISS, and Libraries</h2><ul><li><strong>HDL</strong>: Generates synthesizable Verilog&#x2F;VHDL from the design.</li><li><strong>ISS</strong>: Provides an instruction-set simulator for software validation.</li><li><strong>Libraries</strong>: Include standard and custom components (e.g., arithmetic units, register files).</li></ul><h2 id="Executing-a-tctcore-Task"><a href="#Executing-a-tctcore-Task" class="headerlink" title="Executing a tctcore Task"></a>Executing a <code>tctcore</code> Task</h2><p>To run prx files and generate infrastructure code, use <code>chessmk</code> and a Makefile. For example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chessmk lib/tctcore.prx -r</span><br><span class="line">chessmk lib/tctcore.prx</span><br><span class="line">chessmk iss/caiss.prx</span><br><span class="line">chessmk hdl/tctcore_vlog.prx</span><br></pre></td></tr></table></figure><p>This process creates directories for debugging, type&#x2F;register visualization, and centralized maintenance.</p><h3 id="Running-C-C-Simulation"><a href="#Running-C-C-Simulation" class="headerlink" title="Running C&#x2F;C++ Simulation"></a>Running C&#x2F;C++ Simulation</h3><p>Create a dedicated Makefile (e.g., <code>make_tctcore</code>) then:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compile algorithm</span></span><br><span class="line">chesscc -c iirdirect/iirdirect.c -P lib/tctcore.prx</span><br><span class="line"><span class="comment"># Link to generate executable</span></span><br><span class="line">chesscc -o hdl/tctcore_vlog_go/iirdirectx iirdirect.o -P lib/tctcore.prx</span><br><span class="line"></span><br><span class="line"><span class="comment"># Elaborate and simulate</span></span><br><span class="line"><span class="built_in">cd</span> hdl/tctcore_vlog_go</span><br><span class="line">make elab</span><br><span class="line">make <span class="built_in">test</span> TEST=iirdirectx</span><br><span class="line">make sim</span><br><span class="line"><span class="built_in">cd</span> ../..</span><br></pre></td></tr></table></figure><p>At this point, the basic simulation and verification are complete. Continuous integration into the CI&#x2F;CD pipeline can be configured as needed.</p>]]></content>
      
      
      <categories>
          
          <category> Computer Architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASIP design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Biography</title>
      <link href="/2025/02/10/aboutMe/"/>
      <url>/2025/02/10/aboutMe/</url>
      
        <content type="html"><![CDATA[<h1 id="Biography"><a href="#Biography" class="headerlink" title="Biography"></a>Biography</h1><p>I am currently a junior at the School of Electronic Engineering and Computer Science at Peking University, where my research interests lie at the intersection of hardware architecture design and machine learning, with a particular focus on hardware-software co-design. This field excites me because it bridges the gap between efficient hardware systems and intelligent algorithms, offering transformative potential for modern computing.</p><p>Building on a strong foundation in hardware design from my undergraduate studies, along with research experience in AI chip development, I am eager to deepen my expertise and contribute to groundbreaking innovations in the field. I plan to continue my graduate studies in the fall of 2026, and I am currently seeking a fall research internship to further develop my skills and knowledge.</p><p>Feel free to reach out to me anytime. You can find my CV <a href="https://worldline22.github.io/pdf/CV.pdf">here</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在前面（Preface）</title>
      <link href="/2024/07/28/preinfo/"/>
      <url>/2024/07/28/preinfo/</url>
      
        <content type="html"><![CDATA[<ol><li>这是我的个人博客，本网站将不定期更新自己科研、生活上的点点滴滴，希望你能喜欢。</li><li>网页分为“黑&#x2F;白”两种模式可供选择，右下角设置键可以修改模式。</li><li>本网页目前评论功能只支持拥有github账号的访客使用，评论时请使用自己的github账号登录，注意评论文明，感谢你的浏览(❤ ω ❤)。</li></ol><hr><ol><li><p>This is my personal blog. It will be updated from time to time with bits and pieces of my research and daily life. I hope you enjoy it.</p></li><li><p>The website offers both dark and light modes, which you can switch using the settings button at the bottom right corner.</p></li><li><p>Currently, the comment feature only supports visitors with a GitHub account. Please log in with your GitHub account to comment. Be respectful—thank you for visiting! (❤ ω ❤)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
